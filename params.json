{"name":"auto-ssh-tunnel","tagline":"Automatically create a Reverse SSH Tunnel!","body":"<img src=\"https://raw.githubusercontent.com/facerecog/auto-ssh-tunnel/gh-pages/images/auto-ssh-tunnel%20logo.png\" align=\"left\" height=\"100\" width=\"100\" />\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n&nbsp;\r\n&nbsp;  \r\n&nbsp;  \r\n\r\n\r\n#  **Overview**\r\n\r\nAutomatic SSH Tunnel is a Python script which can be used to create a Reverse SSH Tunnel between multiple computers running Linux and a centralized server.\r\n\r\nLicensed under the MIT License - [https://opensource.org/licenses/MIT](https://opensource.org/licenses/MIT)\r\n\r\n### Features\r\n\r\n- Automatically configures and runs openssh to set-up a reverse ssh connection during boot-up \r\n\r\n- Automatically generates ssh keys\r\n\r\n- No need to store the server's password\r\n\r\n- Works with Debian-based systems, including Ubuntu\r\n\r\n- 3-step configuration wizard that requires less than 1 minute to set-up  \r\n\r\n\r\n### System requirements\r\n\r\n- These instructions were tested on Ubuntu 15.10, Ubuntu 14.04.3, and Raspbian Jessie (Raspberry Pi)\r\n\r\n- The installation script automatically installs openssh-server with Apt  \r\n\r\n-----------------------\r\n\r\n#  **Animated Tutorial**\r\n\r\n<div style=\"float:left; width:100%\">\r\n    <img src=\"https://raw.githubusercontent.com/facerecog/auto-ssh-tunnel/gh-pages/images/intro_video.gif\" align=\"left\" width=540px height=310px  /> \r\n</div>\r\n\r\n\r\n&nbsp;\r\n&nbsp;  \r\n&nbsp;  \r\n&nbsp;  \r\n&nbsp;  \r\n&nbsp;  \r\n&nbsp;  \r\n&nbsp;\r\n&nbsp;  \r\n&nbsp;  \r\n&nbsp;  \r\n&nbsp;  \r\n&nbsp;  \r\n&nbsp;  \r\n&nbsp;  \r\n\r\n-----------------------\r\n\r\n# **Getting started** \r\n\r\n\r\n\r\n### Download\r\n\r\nClone the latest repository version from Github (recommended):  \r\n`$ git clone https://github.com/facerecog/auto-ssh-tunnel.git`  \r\n\r\nAlternatively, download the .tar.gz  file from the top of this page and unpack it:  \r\n`$ wget https://github.com/facerecog/auto-ssh-tunnel/tarball/master  -O - | tar -xz `  \r\n\r\n\r\nNow `cd` into the newly extracted directory.\r\n\r\n\r\n### Installation \r\n\r\n__*Additional instructions for Mac OS X Users*__\r\n\r\n  *Go to:  \r\nSystem Preferences > Sharing. Turn on \"Remote Login\". Allow access for \"All Users\".*\r\n&nbsp;  \r\n\r\n1. Run  configuration.py  to specify the port, username, and IP address of the SSH server:  \r\n`$ python configure.py <port> <username> <ip address>` \r\n\r\n2. Run the following command:  \r\n`$ sudo python setup.py install`  \r\n\r\nThe installation will proceed automatically. If successful, the output of all the commands should roughly show:\r\n\r\n```\r\nReading package lists... Done\r\nBuilding dependency tree       \r\nReading state information... Done\r\nopenssh-server is already the newest version.\r\n0 upgraded, 0 newly installed, 0 to remove and 118 not upgraded.\r\n[*] Installing autossh client...\r\n[*] Installing autossh as startup application...\r\nmkdir: cannot create directory ‘.ssh’: File exists\r\nyes: standard output: Broken pipe\r\nyes: write error\r\nGenerating public/private rsa key pair.\r\nEnter file in which to save the key (/root/.ssh/id_rsa): priv_key already exists.\r\nOverwrite (y/n)? [*] Copying SSH-Keys file over to server...\r\n/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\r\n/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\r\n\"<username>@<ip address>\" 's password: \r\nNumber of key(s) added: 1\r\n\r\nNow try logging into the machine, with:   \"ssh ' \"<username>@<ip address>\" '\"\r\nand check to make sure that only the key(s) you wanted were added.\r\n\r\n[*] Installing private keys inside protected folder...\r\nyes: standard output: Broken pipe\r\nyes: write error\r\n[*] Moving autossh client into the /usr/local/bin/ directory...\r\n[*] Moving private key to /etc/auto-ssh-tunnel/\r\nmkdir: cannot create directory ‘/etc/auto-ssh-tunnel’: File exists\r\nyes: standard output: Broken pipe\r\nyes: write error\r\n\r\n[*] We are now finished with the installation! Restart the client to complete the installation. To run autossh, input connect.py on the terminal.\r\n```  \r\n-------------------------\r\n\r\n\r\n# **How the script works**  \r\n\r\nDuring installation, the script will automatically append the following lines to /etc/ssh/ssh_config:\r\n```\r\nServerAliveInterval 30\r\nServerAliveCountMax 4\r\n```\r\nIt will also append the following to /etc/ssh/sshd_config\r\n```\r\nClientAliveInterval 30\r\nClientAliveCountMax 4\r\n```\r\n\r\nUpon boot, the client will run `connect.py`, which sets up a reverse ssh tunnel. The server may now ssh into the client even if the client resides behind a NAT firewall.\r\n\r\n-------------------------\r\n\r\n# **Verify that it works**  \r\n\r\n* From the client, ssh into your server:  \r\n`$ ssh <rootname>@<ip address>`  \r\n\r\n* Once in, connect back to your client:  \r\n`$ ssh <your username>@localhost -p <port number specified as above>`\r\n\r\n* If successful, you have just ssh-ed back into your client. Congratulations and enjoy!\r\n\r\n-------------------------\r\n\r\n# **Reverse SSH Tunnel Diagram**  \r\n\r\n<img src=\"https://raw.githubusercontent.com/facerecog/auto-ssh-tunnel/gh-pages/images/Client-server%20diagram.png\"/>\r\n\r\n\r\n-------------------------\r\n\r\n# **Uninstall**  \r\n\r\nTo uninstall:\r\n`$ sudo rm -rf /etc/init.d/connect.py /etc/auto-ssh-tunnel /usr/local/bin/connect.py /System/Library/StartupItems/auto-ssh-tunnel/`  \r\n\r\n\r\n-------------------------\r\n\r\n# **Support**  \r\n\r\nIf you want to support this project, please consider reaching out to me via  muhd.amrullah@facerecog.asia  \r\n\r\n\r\n-------------------------  \r\nProperty of Facerecog Asia Pte. Ltd. and 26 Factorial","google":"UA-73734489-1","note":"Don't delete this file! It's used internally to help with page regeneration."}