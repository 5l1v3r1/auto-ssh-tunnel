{"name":"auto-ssh-tunnel","tagline":"Automatically create a Reverse SSH Tunnel !","body":"# **Overview**\r\n\r\nAutomatic SSH Tunnel is a Python script which can be used to create a Reverse SSH Tunnel between multiple computers running Linux and a centralized server.\r\n\r\n### Features\r\n\r\n- Automatically configures and runs openssh to set-up a reverse ssh connection during boot-up \r\n\r\n- Automatically generates ssh keys\r\n\r\n- No need to store the server's password\r\n\r\n- Works with Debian-based systems, including Ubuntu\r\n\r\n- 3-step configuration wizard that requires less than 1 minute to set-up\r\n\r\n\r\n\r\n\r\n### System requirements\r\n\r\n- These instructions were tested on Ubuntu 15.10\r\n\r\n- The installation script automatically installs openssh-server with Apt\r\n\r\n\r\n\r\n# **Getting started**  \r\n\r\n\r\n### Download\r\n\r\n \r\n1. Clone the latest repository version from Github (recommended):  \r\n`$ git clone https://github.com/facerecog/auto-ssh-tunnel.git`  \r\n\r\nAlternatively, download the .tar.gz  file from the top of this page and unpack it:  \r\n`$ wget ______ && tar xf ______`  \r\n\r\n\r\n2. Run configuration.py to specify the port, username, and IP address of the SSH server:\r\n$ python configure.py <port> <username> <ip address>  \r\n\r\n\r\n### Installation  \r\n\r\n1. Run the following command:\r\n`$ sudo python setup.py install`  \r\n\r\n2. Enter the server’s <username>@<ipaddress> as prompted  \r\n\r\n3. You will be prompted for a passphrase. Give a **blank** passphrase.  \r\n\r\nThe installation will proceed automatically. If successful, the output of all the commands should roughly show\r\n\r\n`Reading package lists... Done\r\nBuilding dependency tree       \r\nReading state information... Done\r\nopenssh-server is already the newest version.\r\n0 upgraded, 0 newly installed, 0 to remove and 118 not upgraded.\r\nWhat is the server's rootname@ipaddress?: \"<username>@<ip address>\"\r\n[*] Installing autossh client...\r\n[*] Installing autossh as startup application...\r\nmkdir: cannot create directory ‘.ssh’: File exists\r\nyes: standard output: Broken pipe\r\nyes: write error\r\nGenerating public/private rsa key pair.\r\nEnter file in which to save the key (/root/.ssh/id_rsa): priv_key already exists.\r\nOverwrite (y/n)? [*] Copying SSH-Keys file over to server...\r\n/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\r\n/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\r\n\"<username>@<ip address>\" 's password: \r\nNumber of key(s) added: 1\r\n\r\nNow try logging into the machine, with:   \"ssh ' \"<username>@<ip address>\" '\"\r\nand check to make sure that only the key(s) you wanted were added.\r\n\r\n[*] Installing private keys inside protected folder...\r\nyes: standard output: Broken pipe\r\nyes: write error\r\n[*] Moving autossh client into the /usr/local/bin/ directory...\r\n[*] Moving private key to /etc/auto-ssh-tunnel/\r\nmkdir: cannot create directory ‘/etc/auto-ssh-tunnel’: File exists\r\nyes: standard output: Broken pipe\r\nyes: write error\r\n\r\n[*] We are now finished with the installation! Restart the client to complete the installation. To run autossh, input connect.py on the terminal.`  \r\n\r\n\r\n\r\n------\r\nFirst, clone the repository using git (recommended):\r\n\r\n$ git clone https://github.com/facerecog/auto-ssh-tunnel/\r\nThen change the PORT and the IP ADDRESS of the server we are connecting to:\r\n\r\n$ cd Client\r\n$ nano connect.py\r\nlocation_of_pem_file = \"/home/install/Downloads/auto-ssh-tunnel/server\"\r\nport_open = \"50000\"\r\nusername_ipaddress = \"server@192.168.1.202\"\r\nThen give the execution permission to the setup.py script and run it:\r\n\r\n$ sudo python setup.py install\r\nThe first time you run setup.py install, you'll be guided through a wizard in order to configure ssh as a [S]erver or a [C]lient.\r\n\r\n\r\n### Configuration wizard\r\n\r\nThe configuration wizard is pretty self-explanatory. One thing to notice is that you will generate a current_directory/<server>. The file to current_directory/<server> is your pem key to enable this client to ssh to the server without the use of password. During the setup.py install, a public key will be pushed to the server and saved in /.ssh/authorized_keys You should never exchange your private pem keys to others.\r\n\r\n### Configuration as a Client\r\n\r\nGenerating public/private rsa key pair.\r\nEnter file in which to save the key (/home/anonymouse/.ssh/id_rsa): server\r\nEnter passphrase (empty for no passphrase): \r\nEnter same passphrase again: \r\nYour identification has been saved in server.\r\nYour public key has been saved in server.pub.\r\nThe key fingerprint is:\r\nbb:c6:9c:ee:6b:c0:67:58:b2:bb:4b:44:72:d3:cc:a5 localhost@localhost\r\nThe key's randomart image is:\r\nConfiguration as a Server\r\n\r\n$ ifconfig\r\nPort forward your IP address to port 22 on your modem or router\r\n\r\n### Available commands\r\n\r\nconnect.py; Manually connect the client to the server\r\nTested Environments\r\n\r\n\r\nRaspberry Pi\r\nUbuntu 14.04 LTS\r\nCustomer Service and Support\r\n\r\nIf you want to support this project, please consider reaching out to me:\r\n\r\nEmail: muhd.amrullah@facerecog.asia\r\n\r\n\r\nProperty of Facerecog Asia Pte. Ltd. and 26 Factorial","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}