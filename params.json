{"name":"Auto-ssh-tunnel","tagline":"Automatic SSH Tunnel is a PYTHON script which can be used to create a reverse ssh tunnel between multiple computers running a Unix-based client and a centralized server. Property of Facerecog Asia Pte. Ltd. and 26 Factorial","body":"Automatic SSH Tunnel is a PYTHON script which can be used to create a reverse ssh tunnel between multiple computers running Linux and a centralized server.\r\n\r\nIt's written in PYTHON scripting language.\r\n\r\nWhy use this script?\r\n\r\nPortable: It's written in PYTHON scripting and only needs openSSH-server (openSSH-server is a tool to enable computers to behave as a pseudo server to ensure a successful reverse tunnelling).\r\nSecure: It requires a USB hardware physical transfer of the ssh keys.\r\nFeatures\r\n\r\nUnix-enabled\r\nNo password required or stored\r\nSimple step-by-step configuration wizard\r\nTakes less than 1 minute to fully set-up\r\nGetting started\r\n\r\nFirst, clone the repository using git (recommended):\r\n\r\n$ git clone https://github.com/facerecog/auto-ssh-tunnel/\r\nThen change the PORT and the IP ADDRESS of the server we are connecting to:\r\n\r\n$ cd Client\r\n$ nano connect.py\r\nlocation_of_pem_file = \"/home/install/Downloads/auto-ssh-tunnel/server\"\r\nport_open = \"50000\"\r\nusername_ipaddress = \"server@192.168.1.202\"\r\nThen give the execution permission to the setup.py script and run it:\r\n\r\n$ sudo python setup.py install\r\nThe first time you run setup.py install, you'll be guided through a wizard in order to configure ssh as a [S]erver or a [C]lient.\r\n\r\nConfiguration wizard\r\n\r\nThe configuration wizard is pretty self-explanatory. One thing to notice is that you will generate a current_directory/<server>. The file to current_directory/<server> is your pem key to enable this client to ssh to the server without the use of password. During the setup.py install, a public key will be pushed to the server and saved in /.ssh/authorized_keys You should never exchange your private pem keys to others.\r\n\r\nConfiguration as a Client\r\n\r\nGenerating public/private rsa key pair.\r\nEnter file in which to save the key (/home/anonymouse/.ssh/id_rsa): server\r\nEnter passphrase (empty for no passphrase): \r\nEnter same passphrase again: \r\nYour identification has been saved in server.\r\nYour public key has been saved in server.pub.\r\nThe key fingerprint is:\r\nbb:c6:9c:ee:6b:c0:67:58:b2:bb:4b:44:72:d3:cc:a5 localhost@localhost\r\nThe key's randomart image is:\r\nConfiguration as a Server\r\n\r\n$ ifconfig\r\nPort forward your IP address to port 22 on your modem or router\r\n\r\nAvailable commands\r\n\r\nconnect.py; Manually connect the client to the server\r\nTested Environments\r\n\r\nRaspberry Pi\r\nUbuntu 14.04 LTS\r\nCustomer Service and Support\r\n\r\nIf you want to support this project, please consider reaching out to me:\r\n\r\nEmail: muhd.amrullah@facerecog.asia\r\n\r\n\r\n### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here [using GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/), select a template crafted by a designer, and publish. After your page is generated, you can check out the new `gh-pages` branch locally. If you’re using GitHub Desktop, simply sync your repository and you’ll see the new branch.\r\n\r\n### Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}